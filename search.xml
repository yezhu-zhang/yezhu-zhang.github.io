<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>苏不同画的画</title>
      <link href="/2020/08/10/su-bu-tong-hua-de-hua/"/>
      <url>/2020/08/10/su-bu-tong-hua-de-hua/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/08/10/aHoImV.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react实现后台管理系统-1</title>
      <link href="/2020/08/10/react-shi-xian-hou-tai-guan-li-xi-tong-1/"/>
      <url>/2020/08/10/react-shi-xian-hou-tai-guan-li-xi-tong-1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-脚手架创建项目"><a href="#1-脚手架创建项目" class="headerlink" title="1. 脚手架创建项目"></a>1. 脚手架创建项目</h1><p>npx create-react-app myapp</p><h1 id="2-react-UI库"><a href="#2-react-UI库" class="headerlink" title="2. react UI库"></a>2. react UI库</h1><p><a href="https://ant-design.gitee.io/index-cn" target="_blank" rel="noopener">ant Design</a></p><pre class=" language-js"><code class="language-js">ant<span class="token operator">-</span>design<span class="token operator">-</span>pro镜像地址：http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>ant<span class="token operator">-</span>design<span class="token operator">-</span>pro<span class="token punctuation">.</span>gitee<span class="token punctuation">.</span>io<span class="token operator">/</span>index<span class="token operator">-</span>cnantd<span class="token operator">-</span>mobile镜像地址：https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>antd<span class="token operator">-</span>mobile<span class="token punctuation">.</span>gitee<span class="token punctuation">.</span>io<span class="token operator">/</span>index<span class="token operator">-</span>cnant<span class="token operator">-</span>design镜像地址http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>ant<span class="token operator">-</span>design<span class="token punctuation">.</span>gitee<span class="token punctuation">.</span>io<span class="token operator">/</span>index<span class="token operator">-</span>cn</code></pre><p>安装ui库</p><pre class=" language-js"><code class="language-js">cnpm i antd <span class="token operator">-</span>S</code></pre><p>无需做任何的配置<br>只需要在App.css文件中引入 css文件即可<br>App.scc</p><pre><code>@import '~antd'/dist/antd.css</code></pre><h1 id="3-布局"><a href="#3-布局" class="headerlink" title="3. 布局"></a>3. 布局</h1><p>Layout 布局<br>src/layout/index/index.jsx<br>复制代码至本地文件,根据api引入css文件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token string">'./style.css'</span><span class="token operator">...</span><span class="token keyword">export</span> <span class="token keyword">default</span> Index</code></pre><p>运行项目,审查元素,修改样式</p><h1 id="4-构建系统的左侧菜单"><a href="#4-构建系统的左侧菜单" class="headerlink" title="4. 构建系统的左侧菜单"></a>4. 构建系统的左侧菜单</h1><p>src/router/menus.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> menus <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span> <span class="token string">'系统首页'</span><span class="token punctuation">,</span>    icon<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    role<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/pro'</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span> <span class="token string">'商品管理'</span><span class="token punctuation">,</span>    icon<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    role<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/pro/list'</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">'商品列表'</span><span class="token punctuation">,</span>        icon<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        role<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span> <span class="token string">'用户管理'</span><span class="token punctuation">,</span>    role<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    icon<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/user/list'</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">'用户列表'</span><span class="token punctuation">,</span>        role<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        icon<span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/user/admin'</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">'管理员列表'</span><span class="token punctuation">,</span>        role<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        icon<span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/cart'</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span> <span class="token string">'购物车管理'</span><span class="token punctuation">,</span>    icon<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    role<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/cart/list'</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">'购物车列表'</span><span class="token punctuation">,</span>        icon<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        role<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/order'</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span> <span class="token string">'订单管理'</span><span class="token punctuation">,</span>    icon<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    role<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/order/list'</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">'订单列表'</span><span class="token punctuation">,</span>        icon<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        role<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">default</span> menus</code></pre><h1 id="5-拆分组件"><a href="#5-拆分组件" class="headerlink" title="5. 拆分组件"></a>5. 拆分组件</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-4</title>
      <link href="/2020/08/10/react-4/"/>
      <url>/2020/08/10/react-4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-react的路由"><a href="#1-react的路由" class="headerlink" title="1. react的路由"></a>1. react的路由</h1><p>vue的路由是vue-router<br>react的路由是 react-router — react-router-dom</p><h1 id="2-路由的使用"><a href="#2-路由的使用" class="headerlink" title="2. 路由的使用"></a>2. 路由的使用</h1><p>安装</p><pre class=" language-js"><code class="language-js">cnpm i react<span class="token operator">-</span>router<span class="token operator">-</span>dom</code></pre><p>分别创建<br>views/home/index.jsx<br>views/kind/index.jsx<br>views/cart/index.jsx<br>views/user/index.jsx</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">const</span> Com <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      购物车    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Com</code></pre><p>配置基本路由  App.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// BrowserRouter   /        history</span><span class="token comment" spellcheck="true">// HashRouter      /#/      hash</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span>  Switch<span class="token punctuation">,</span>  Route<span class="token punctuation">,</span>  Redirect<span class="token punctuation">,</span>  NavLink<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'./views/home'</span><span class="token keyword">import</span> Kind <span class="token keyword">from</span> <span class="token string">'./views/kind'</span><span class="token keyword">import</span> Cart <span class="token keyword">from</span> <span class="token string">'./views/cart'</span><span class="token keyword">import</span> User <span class="token keyword">from</span> <span class="token string">'./views/user'</span><span class="token comment" spellcheck="true">// exact 精准匹配路由</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Router<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/home"</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span>        <span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/kind"</span><span class="token operator">></span>分类<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span>        <span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/cart"</span><span class="token operator">></span>购物车<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span>        <span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/user"</span><span class="token operator">></span>我的<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Switch<span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home"</span> component <span class="token operator">=</span> <span class="token punctuation">{</span> Home <span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/kind"</span> <span class="token operator">></span>          <span class="token operator">&lt;</span>Kind <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/cart"</span> render <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>Cart <span class="token operator">/</span><span class="token operator">></span>            <span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/user"</span> component <span class="token operator">=</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Redirect path<span class="token operator">=</span><span class="token string">"/"</span> exact to<span class="token operator">=</span><span class="token string">"/home"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre><p>配置css文件 index.css</p><pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> -apple-system, BlinkMacSystemFont, <span class="token string">'Segoe UI'</span>, <span class="token string">'Roboto'</span>, <span class="token string">'Oxygen'</span>,    <span class="token string">'Ubuntu'</span>, <span class="token string">'Cantarell'</span>, <span class="token string">'Fira Sans'</span>, <span class="token string">'Droid Sans'</span>, <span class="token string">'Helvetica Neue'</span>,    sans-serif<span class="token punctuation">;</span>  <span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span> antialiased<span class="token punctuation">;</span>  <span class="token property">-moz-osx-font-smoothing</span><span class="token punctuation">:</span> grayscale<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">code </span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> source-code-pro, Menlo, Monaco, Consolas, <span class="token string">'Courier New'</span>,    monospace<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.active</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#f66</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="3-抽离路由的配置"><a href="#3-抽离路由的配置" class="headerlink" title="3. 抽离路由的配置"></a>3. 抽离路由的配置</h1><p>router/index.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../views/home'</span><span class="token keyword">import</span> Kind <span class="token keyword">from</span> <span class="token string">'../views/kind'</span><span class="token keyword">import</span> Cart <span class="token keyword">from</span> <span class="token string">'../views/cart'</span><span class="token keyword">import</span> User <span class="token keyword">from</span> <span class="token string">'../views/user'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span> <span class="token string">'首页'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Home<span class="token punctuation">,</span>    icon<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    footer<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/kind'</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span> <span class="token string">'分类'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Kind<span class="token punctuation">,</span>    icon<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    footer<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/cart'</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span> <span class="token string">'购物车'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Cart<span class="token punctuation">,</span>    icon<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    footer<span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span> <span class="token string">'我的'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> User<span class="token punctuation">,</span>    icon<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    footer<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>App.js</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Switch<span class="token operator">></span>    <span class="token punctuation">{</span>        routes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>Route key<span class="token operator">=</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>path <span class="token punctuation">}</span> path<span class="token operator">=</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>path <span class="token punctuation">}</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>item<span class="token punctuation">.</span>component<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token operator">&lt;</span>Redirect path<span class="token operator">=</span><span class="token string">"/"</span> exact to<span class="token operator">=</span><span class="token string">"/home"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span></code></pre><h1 id="4-多视图路由"><a href="#4-多视图路由" class="headerlink" title="4. 多视图路由"></a>4. 多视图路由</h1><p>创建components/Footer.jsx</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> NavLink <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">const</span> Footer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/home"</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span>    <span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/kind"</span><span class="token operator">></span>分类<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span>    <span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/cart"</span><span class="token operator">></span>购物车<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span>    <span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/user"</span><span class="token operator">></span>我的<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> Footer</code></pre><p>配置路由,给home,kind,user页面添加footer组件<br>router/index.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../views/home'</span><span class="token keyword">import</span> Kind <span class="token keyword">from</span> <span class="token string">'../views/kind'</span><span class="token keyword">import</span> Cart <span class="token keyword">from</span> <span class="token string">'../views/cart'</span><span class="token keyword">import</span> User <span class="token keyword">from</span> <span class="token string">'../views/user'</span><span class="token keyword">import</span> Footer <span class="token keyword">from</span> <span class="token string">'./../components/Footer'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    redirect<span class="token punctuation">:</span> <span class="token string">'/home'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span> <span class="token string">'首页'</span><span class="token punctuation">,</span>    icon<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>Home <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>      footer<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Footer <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/kind'</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span> <span class="token string">'分类'</span><span class="token punctuation">,</span>    icon<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>Kind <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>      footer<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Footer <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/cart'</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span> <span class="token string">'购物车'</span><span class="token punctuation">,</span>    icon<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>Cart <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span> <span class="token string">'我的'</span><span class="token punctuation">,</span>    icon<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>User <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>      footer<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Footer <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>App.js添加footer视图</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> RouterView <span class="token keyword">from</span> <span class="token string">'./router/RouterView'</span><span class="token comment" spellcheck="true">// exact 精准匹配路由</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span><span class="token operator">></span>      <span class="token operator">&lt;</span>RouterView <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>RouterView name<span class="token operator">=</span><span class="token string">"footer"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre><p>router/RouterView.jsx</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> HashRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Switch<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Redirect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">import</span> routes <span class="token keyword">from</span> <span class="token string">'./index'</span><span class="token keyword">class</span> <span class="token class-name">RouterView</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>Router<span class="token operator">></span>        <span class="token operator">&lt;</span>Switch<span class="token operator">></span>          <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// routes.map(item => {</span>            <span class="token comment" spellcheck="true">//   return (</span>            <span class="token comment" spellcheck="true">//     &lt;Route key= { item.path } path={ item.path } component = { item.components.default } /></span>            <span class="token comment" spellcheck="true">//   )</span>            <span class="token comment" spellcheck="true">// })</span>            routes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>Route key <span class="token operator">=</span> <span class="token punctuation">{</span> item<span class="token punctuation">.</span>path <span class="token punctuation">}</span> path<span class="token operator">=</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>path <span class="token punctuation">}</span> <span class="token operator">></span>                  <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'default'</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name <span class="token operator">?</span> item<span class="token punctuation">.</span>components<span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token punctuation">:</span> <span class="token keyword">null</span>                  <span class="token punctuation">}</span>                  <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'footer'</span> <span class="token operator">?</span> item<span class="token punctuation">.</span>components<span class="token punctuation">.</span>footer <span class="token punctuation">:</span> <span class="token keyword">null</span>                  <span class="token punctuation">}</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>              <span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>          <span class="token operator">&lt;</span>Redirect path<span class="token operator">=</span><span class="token string">"/"</span> exact to<span class="token operator">=</span><span class="token string">"/home"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> RouterView</code></pre><p>重定向<br>router/index.js</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>    redirect<span class="token punctuation">:</span><span class="token string">'/home'</span><span class="token punctuation">}</span></code></pre><p>router/RouterView.jsx</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> HashRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Switch<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Redirect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">import</span> routes <span class="token keyword">from</span> <span class="token string">'./index'</span><span class="token keyword">class</span> <span class="token class-name">RouterView</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>Router<span class="token operator">></span>        <span class="token operator">&lt;</span>Switch<span class="token operator">></span>          <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// routes.map(item => {</span>            <span class="token comment" spellcheck="true">//   return (</span>            <span class="token comment" spellcheck="true">//     &lt;Route key= { item.path } path={ item.path } component = { item.components.default } /></span>            <span class="token comment" spellcheck="true">//   )</span>            <span class="token comment" spellcheck="true">// })</span>            routes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>redirect<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">&lt;</span>Redirect  key <span class="token operator">=</span> <span class="token punctuation">{</span> item<span class="token punctuation">.</span>path <span class="token punctuation">}</span>  path<span class="token operator">=</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>path <span class="token punctuation">}</span> exact to<span class="token operator">=</span> <span class="token punctuation">{</span> item<span class="token punctuation">.</span>redirect <span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>              <span class="token punctuation">}</span>              <span class="token keyword">return</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>Route key <span class="token operator">=</span> <span class="token punctuation">{</span> item<span class="token punctuation">.</span>path <span class="token punctuation">}</span> path<span class="token operator">=</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>path <span class="token punctuation">}</span> <span class="token operator">></span>                  <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'default'</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name <span class="token operator">?</span> item<span class="token punctuation">.</span>components<span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token punctuation">:</span> <span class="token keyword">null</span>                  <span class="token punctuation">}</span>                  <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'footer'</span> <span class="token operator">?</span> item<span class="token punctuation">.</span>components<span class="token punctuation">.</span>footer <span class="token punctuation">:</span> <span class="token keyword">null</span>                  <span class="token punctuation">}</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>              <span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>          <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;Redirect path="/" exact to="/home" /> */</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> RouterView</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-3</title>
      <link href="/2020/08/07/react-3/"/>
      <url>/2020/08/07/react-3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-react常用手脚架"><a href="#1-react常用手脚架" class="headerlink" title="1 react常用手脚架"></a>1 react常用手脚架</h1><p>用react手脚架搭建项目</p><pre class=" language-js"><code class="language-js">create<span class="token operator">-</span>react<span class="token operator">-</span>app</code></pre><p>方式一:</p><pre class=" language-js"><code class="language-js">cnom i create<span class="token operator">-</span>react<span class="token operator">-</span>app <span class="token operator">-</span>gcreate<span class="token operator">-</span>react<span class="token operator">-</span>app myapp</code></pre><p>方式二:</p><pre class=" language-js"><code class="language-js">npx create<span class="token operator">-</span>react<span class="token operator">-</span>app myapp</code></pre><p>方式三:</p><pre class=" language-js"><code class="language-js">npm init react<span class="token operator">-</span>app my<span class="token operator">-</span>app</code></pre><p>方式四:</p><pre class=" language-js"><code class="language-js">yarn create react<span class="token operator">-</span>app my<span class="token operator">-</span>app</code></pre><p>dva.js</p><pre class=" language-js"><code class="language-js">npm install dva<span class="token operator">-</span>cli <span class="token operator">-</span>gdva <span class="token keyword">new</span> <span class="token class-name">myapp</span></code></pre><p>umi</p><pre class=" language-js"><code class="language-js">mkdir myappyarn create @umijs<span class="token operator">/</span>umi<span class="token operator">-</span>app</code></pre><h1 id="2-create-react-app"><a href="#2-create-react-app" class="headerlink" title="2.create-react-app"></a><a href="https://www.html.cn/create-react-app/docs/getting-started/" target="_blank" rel="noopener">2.create-react-app</a></h1><h2 id="2-1-创建项目"><a href="#2-1-创建项目" class="headerlink" title="2.1 创建项目"></a>2.1 创建项目</h2><pre class=" language-js"><code class="language-js">npx create<span class="token operator">-</span>react<span class="token operator">-</span>app myreactapp</code></pre><p>并没有发现webpack的相关配置文件<br>打开package.json文件,分析运行的命令</p><pre class=" language-js"><code class="language-js">之前dev<span class="token punctuation">:</span> <span class="token string">'webpack-dev-server'</span>build<span class="token punctuation">:</span> <span class="token string">'webpack'</span>现在start：<span class="token string">'react-scripts start'</span>build：<span class="token string">'react-scripts build'</span>test：<span class="token string">'react-scripts test'</span>eject：<span class="token string">'react-scripts eject'</span></code></pre><p>react-scripts 中肯定会包含有webpack的相关配置,处于node_moules中<br>如果项目一定要配置webpack,建议运行第四个命令—cnpm run eject — 抽离webpack的配置文件 — 不可逆操作,一旦操作就回不去了<br>如果不需要webpack的配置,不用管<br>假设需要配置webpack — 抽离配置文件</p><pre class=" language-js"><code class="language-js">cnpm run eject</code></pre><h2 id="2-2-改造项目"><a href="#2-2-改造项目" class="headerlink" title="2.2 改造项目"></a>2.2 改造项目</h2><p>将src目录下的App.js里return内容改为</p><div>hello react</div><br>src下的index.js<br>react的严格模式:如果即将废弃的写法出现,严格模式报警告信息<p></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> serviceWorker <span class="token keyword">from</span> <span class="token string">'./serviceWorker'</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>StrictMode<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>StrictMode<span class="token operator">></span></code></pre><p>如果想要项目运行加载更快,将unregister改为register</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// If you want your app to work offline and load faster, you can change</span><span class="token comment" spellcheck="true">// unregister() to register() below. Note this comes with some pitfalls.</span><span class="token comment" spellcheck="true">// Learn more about service workers: https://bit.ly/CRA-PWA</span>serviceWorker<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>react的注意事项<br>StrictMode 是一个用来突出显示应用程序中潜在问题的工具<br>StrictMode 不会渲染任何可见的 UI<br>触发额外的检查和警告。<br>识别不安全的生命周期<br>关于使用过时字符串 ref API 的警告<br>检测意外的副作用<br>检测过时的 context API</p><h2 id="2-3-组件嵌套"><a href="#2-3-组件嵌套" class="headerlink" title="2.3 组件嵌套"></a>2.3 组件嵌套</h2><p>App.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">'./child'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>组件嵌套<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>父组件<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Child <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre><p>父组件给子组件传值<br>父组件在调用子组件的地方，添加一个自定义的属性，属性的值就是父组件传递给子组件的值，如果属性的值是一个变量，boolean或者number类型，需要使用{}处理</p><p>子组件在需要值的地方，<br>类组件： 通过this.props.自定义的属性名 取得传递过来的值<br>函数式组件：有默认参数props，通过 props。自定义的属性名 取得传递过来的值<br>如果需要验证传递的数据的类型，通过引入 prop-types 模块协助完成（自 React v15.5 起，React.PropTypes 已移入另一个包中。请使用 prop-types 库 代替。）</p><pre class=" language-js"><code class="language-js">cnpm i prop<span class="token operator">-</span>types <span class="token operator">-</span>S</code></pre><p>父组件</p><pre class=" language-js"><code class="language-js">        <span class="token operator">&lt;</span>Child         count <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token punctuation">}</span>         flag<span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>         test <span class="token operator">=</span> <span class="token string">"true"</span>        <span class="token operator">/</span><span class="token operator">></span></code></pre><p>子组件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">'prop-types'</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h5<span class="token operator">></span>子组件<span class="token operator">&lt;</span><span class="token operator">/</span>h5<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count <span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>flag <span class="token operator">?</span> <span class="token string">'111'</span> <span class="token punctuation">:</span> <span class="token string">'222'</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>test <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Child<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>  count<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>  flag<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>bool<span class="token punctuation">,</span>  test<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>bool<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Child</code></pre><p><img src="https://s1.ax1x.com/2020/08/10/aHeW7V.png" alt=""><br>子组件给父组件传值<br>父组件在调用子组件的地方，添加一个自定义的属性， 不过属性的值 是一个函数，这个函数由父组件所定义，</p><p>子组件在需要传值的地方，<br>类组件： 通过 this.props.自定义的属性(参数) 传值<br>函数式组件： 通过 props.自定义的属性(参数) 传值<br>父组件</p><pre class=" language-js"><code class="language-js">getData <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    msg<span class="token punctuation">:</span> val  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>Child   count <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token punctuation">}</span>    flag<span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>   test <span class="token operator">=</span> <span class="token string">"true"</span>  onClick <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getData<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>子组件</p><pre><code> &lt;button onClick = { () =&gt; {this.props.onClick('abcdefg')}}&gt;传递数据&lt;/button&gt;</code></pre><p><a href="https://reactjs.bootcss.com/docs/context.html" target="_blank" rel="noopener">Context 传值</a><br>Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。<br>Context 提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递 props。<br>Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据<br>逐层传递</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">class</span> <span class="token class-name">Third</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token number">333</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count <span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">3</span> <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Second</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token number">222</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>Third count<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">2</span> <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span> Context 传值 <span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>Second count<span class="token operator">=</span><span class="token string">"100"</span><span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">1</span> <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre><p>Context传值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">const</span> CountContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">'8888'</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 第一步<span class="token punctuation">,</span>创建Context对象<span class="token operator">--</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Third</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 指定 contextType 读取当前的 theme context。</span>  <span class="token comment" spellcheck="true">// React 会往上找到最近的 theme Provider，然后使用它的值。</span>  <span class="token comment" spellcheck="true">// 在这个例子中，当前的 theme 值为 “dark”。</span>  <span class="token keyword">static</span> contextType <span class="token operator">=</span> CountContext <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 第三步<span class="token punctuation">,</span>必须这么写 <span class="token operator">--</span><span class="token operator">></span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token number">333</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token number">5555</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token punctuation">}</span><span class="token operator">></span>context传值<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 第四<span class="token punctuation">,</span>通过<span class="token keyword">this</span><span class="token punctuation">.</span>context拿到顶级组件的值 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Second</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token number">222</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>Third<span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span> Context 传值 <span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>CountContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 第二步<span class="token punctuation">,</span>Context对象<span class="token punctuation">.</span>Provider 必须通过value属性传值 <span class="token operator">--</span><span class="token operator">></span>          <span class="token operator">&lt;</span>Second <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>CountContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre><p>Context 传值 + Consumer</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">const</span> CountContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">'8888'</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">1</span> <span class="token operator">--</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Third</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token number">333</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token number">5555</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>         <span class="token operator">&lt;</span>CountContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">3</span> <span class="token operator">--</span><span class="token operator">></span>          <span class="token punctuation">{</span>            <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span> value <span class="token punctuation">}</span><span class="token operator">></span>aaaa<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>              <span class="token punctuation">)</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>CountContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Second</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token number">222</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>Third<span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span> Context 传值 <span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>CountContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">2</span> <span class="token operator">--</span><span class="token operator">></span>          <span class="token operator">&lt;</span>Second <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>CountContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre><p>状态管理器传值<br>redux<br>redux + redux-thunk<br>redux + react-redux<br>redux +react-redux +redux -thunk<br>redux-thunk ===&gt; redux-saga / redux-promise<br>mobx<br>mobx + mobx-react<br>dva.js + redux-saga<br>umi -&gt; dva升级 - redux-saga</p><p>react的包含 - 插槽</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">const</span> CountContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">'8888'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Second</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children <span class="token punctuation">}</span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token number">222</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>包含<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>Second<span class="token operator">></span>          Lorem Ipsum is simply dummy text <span class="token keyword">of</span> the printing and typesetting industry<span class="token punctuation">.</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Second<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-2</title>
      <link href="/2020/08/07/react-2/"/>
      <url>/2020/08/07/react-2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-react的表单输入"><a href="#1-react的表单输入" class="headerlink" title="1 react的表单输入"></a>1 react的表单输入</h1><p><a href="https://reactjs.bootcss.com/" target="_blank" rel="noopener">react中文文档</a></p><h2 id="1-1-受控组件"><a href="#1-1-受控组件" class="headerlink" title="1.1 受控组件"></a>1.1 受控组件</h2><p>vue的受控组件 v-model<br>在一个受控组件中,表单数据是由React组件来管理的<br>组件中表单的value值其实就是组件的状态,通过 onChange修改</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      username<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      password<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      note<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      lesson<span class="token punctuation">:</span> <span class="token string">'1'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username <span class="token punctuation">}</span> placeholder<span class="token operator">=</span><span class="token string">"用户名"</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>              username<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value            <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>password <span class="token punctuation">}</span> placeholder<span class="token operator">=</span><span class="token string">"密码"</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                password<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value              <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>password<span class="token punctuation">}</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span>textarea placeholder<span class="token operator">=</span><span class="token string">"备注"</span> value<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>note<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>              note<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value            <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>note<span class="token punctuation">}</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span>select value<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>lesson <span class="token punctuation">}</span> onChange <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>              lesson<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value            <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span>一阶段<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span>二阶段<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"3"</span><span class="token operator">></span>三阶段<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>lesson <span class="token operator">===</span> <span class="token string">'1'</span> <span class="token operator">?</span> <span class="token string">'一阶段'</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>lesson <span class="token operator">===</span> <span class="token string">'2'</span> <span class="token operator">?</span> <span class="token string">'二阶段'</span> <span class="token punctuation">:</span> <span class="token string">'三阶段'</span> <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token punctuation">)</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre><p>通过箭头函数封装—传参</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      username<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      password<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      note<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      lesson<span class="token punctuation">:</span> <span class="token string">'1'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">changeHandler</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>input         type<span class="token operator">=</span><span class="token string">"text"</span>         value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">}</span>         placeholder<span class="token operator">=</span><span class="token string">"用户名"</span>         onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"text"</span>         value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>password<span class="token punctuation">}</span>         placeholder<span class="token operator">=</span><span class="token string">"密码"</span>         onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>password<span class="token punctuation">}</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>textarea         placeholder<span class="token operator">=</span><span class="token string">"备注"</span>         value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>note<span class="token punctuation">}</span>         onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'note'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>note<span class="token punctuation">}</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>select         value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>lesson<span class="token punctuation">}</span>         onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'lesson'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span>一阶段<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span>二阶段<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"3"</span><span class="token operator">></span>三阶段<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>lesson <span class="token operator">===</span> <span class="token string">'1'</span> <span class="token operator">?</span> <span class="token string">'一阶段'</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>lesson <span class="token operator">===</span> <span class="token string">'2'</span> <span class="token operator">?</span> <span class="token string">'二阶段'</span> <span class="token punctuation">:</span> <span class="token string">'三阶段'</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre><p>将箭头函数封装—属性-添加name属性</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      username<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      password<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      note<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      lesson<span class="token punctuation">:</span> <span class="token string">'1'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">changeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>name    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>input         type<span class="token operator">=</span><span class="token string">"text"</span>         value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">}</span>         placeholder<span class="token operator">=</span><span class="token string">"用户名"</span>         name<span class="token operator">=</span><span class="token string">"username"</span>        onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"text"</span>         value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>password<span class="token punctuation">}</span>         placeholder<span class="token operator">=</span><span class="token string">"密码"</span>         name<span class="token operator">=</span><span class="token string">"password"</span>        onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>password<span class="token punctuation">}</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>textarea         placeholder<span class="token operator">=</span><span class="token string">"备注"</span>         name<span class="token operator">=</span><span class="token string">"note"</span>        value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>note<span class="token punctuation">}</span>         onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>note<span class="token punctuation">}</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>select         value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>lesson<span class="token punctuation">}</span>         name<span class="token operator">=</span><span class="token string">"lesson"</span>        onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">}</span><span class="token operator">></span>          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span>一阶段<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span>二阶段<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"3"</span><span class="token operator">></span>三阶段<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>lesson <span class="token operator">===</span> <span class="token string">'1'</span> <span class="token operator">?</span> <span class="token string">'一阶段'</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>lesson <span class="token operator">===</span> <span class="token string">'2'</span> <span class="token operator">?</span> <span class="token string">'二阶段'</span> <span class="token punctuation">:</span> <span class="token string">'三阶段'</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre><h2 id="1-2-非受控组件"><a href="#1-2-非受控组件" class="headerlink" title="1.2 非受控组件"></a>1.2 非受控组件</h2><p>vue的非受控组件是ref</p><pre class=" language-js"><code class="language-js">vue<span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token string">"username"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>usernamereact <span class="token operator">-</span> 老版本<span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token string">"username"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token keyword">this</span><span class="token punctuation">.</span>refs<span class="token punctuation">.</span>username</code></pre><p>非受控组件不写value值</p><p>老版本的非受控组件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      username<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      password<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      note<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      lesson<span class="token punctuation">:</span> <span class="token string">'1'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">changeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>name    <span class="token comment" spellcheck="true">// 假设输入框设定了 id="username" ref="username"</span>    <span class="token comment" spellcheck="true">// this.refs.username = document.getElementById('username')</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>refs<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>value    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"text"</span>        placeholder<span class="token operator">=</span><span class="token string">"用户名1"</span>         name<span class="token operator">=</span><span class="token string">"username"</span>        ref<span class="token operator">=</span><span class="token string">"username"</span>        onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"text"</span>         placeholder<span class="token operator">=</span><span class="token string">"密码1"</span>         name<span class="token operator">=</span><span class="token string">"password"</span>        ref<span class="token operator">=</span><span class="token string">"password"</span>        onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>password<span class="token punctuation">}</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>textarea        placeholder<span class="token operator">=</span><span class="token string">"备注"</span>         name<span class="token operator">=</span><span class="token string">"note"</span>        ref<span class="token operator">=</span><span class="token string">"note"</span>        onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>note<span class="token punctuation">}</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>select         name<span class="token operator">=</span><span class="token string">"lesson"</span>        ref<span class="token operator">=</span><span class="token string">"lesson"</span>        onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">}</span><span class="token operator">></span>          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span>一阶段<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span>二阶段<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"3"</span><span class="token operator">></span>三阶段<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>lesson <span class="token operator">===</span> <span class="token string">'1'</span> <span class="token operator">?</span> <span class="token string">'一阶段'</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>lesson <span class="token operator">===</span> <span class="token string">'2'</span> <span class="token operator">?</span> <span class="token string">'二阶段'</span> <span class="token punctuation">:</span> <span class="token string">'三阶段'</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre><p>新版本的非受控组件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>usernameRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// this.usernameRef.current</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>passwordRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// this.passwordRef.current</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>noteRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// this.noteRef.current</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>lessonRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// this.lessonRef.current</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      username<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      password<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      note<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      lesson<span class="token punctuation">:</span> <span class="token string">'1'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">changeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>name    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">[</span>name <span class="token operator">+</span><span class="token string">'Ref'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>value    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"text"</span>        placeholder<span class="token operator">=</span><span class="token string">"用户名2"</span>         name<span class="token operator">=</span><span class="token string">"username"</span>        ref<span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usernameRef <span class="token punctuation">}</span>        onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"text"</span>         placeholder<span class="token operator">=</span><span class="token string">"密码2"</span>         name<span class="token operator">=</span><span class="token string">"password"</span>        ref<span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>passwordRef <span class="token punctuation">}</span>        onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>password<span class="token punctuation">}</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>textarea        placeholder<span class="token operator">=</span><span class="token string">"备注"</span>         name<span class="token operator">=</span><span class="token string">"note"</span>        ref<span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>noteRef <span class="token punctuation">}</span>        onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>note<span class="token punctuation">}</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>select         name<span class="token operator">=</span><span class="token string">"lesson"</span>        ref<span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lessonRef <span class="token punctuation">}</span>        onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">}</span><span class="token operator">></span>          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span>一阶段<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span>二阶段<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"3"</span><span class="token operator">></span>三阶段<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>lesson <span class="token operator">===</span> <span class="token string">'1'</span> <span class="token operator">?</span> <span class="token string">'一阶段'</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>lesson <span class="token operator">===</span> <span class="token string">'2'</span> <span class="token operator">?</span> <span class="token string">'二阶段'</span> <span class="token punctuation">:</span> <span class="token string">'三阶段'</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre><h1 id="2-react的生命周期"><a href="#2-react的生命周期" class="headerlink" title="2 react的生命周期"></a>2 react的生命周期</h1><p>每个组件都包含生命周期方法<br><a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noopener">生命周期图谱</a><br>现在react 版本 16.31.1<br>16.3 引入新版本寿命周期<br>16.8 正式引入hook(函数式组件拥有了状态) 2019-02-06<br>16.7 可以使用hook –测试版本 2018-12-19</p><h2 id="2-1-老版本的生命周期"><a href="#2-1-老版本的生命周期" class="headerlink" title="2.1 老版本的生命周期"></a>2.1 老版本的生命周期</h2><h3 id="挂载时-—初始化阶段"><a href="#挂载时-—初始化阶段" class="headerlink" title="挂载时 —初始化阶段"></a>挂载时 —初始化阶段</h3><p>constructor()<br>componentWillMount<br>render<br>componentDidMount</p><h3 id="更新时-—运行时阶段"><a href="#更新时-—运行时阶段" class="headerlink" title="更新时 —运行时阶段"></a>更新时 —运行时阶段</h3><p>componentWillReceiveProps<br>shouldComponentUpdate<br>componentWillUpdate<br>render<br>componentDidUpdate</p><h3 id="卸载时-—销毁阶段"><a href="#卸载时-—销毁阶段" class="headerlink" title="卸载时 —销毁阶段"></a>卸载时 —销毁阶段</h3><p>componentWillUnmount()</p><h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h3><p>componentDidCatch</p><h2 id="2-2-新版本的生命周期-16-3开始"><a href="#2-2-新版本的生命周期-16-3开始" class="headerlink" title="2.2 新版本的生命周期 (16.3开始)"></a>2.2 新版本的生命周期 (16.3开始)</h2><h3 id="挂载时-—-初始化阶段"><a href="#挂载时-—-初始化阶段" class="headerlink" title="挂载时 — 初始化阶段"></a>挂载时 — 初始化阶段</h3><p><font color="red">constructor()</font> // 初始化数据 + 改变函数的this指向 + createRef<br>static getDerivedStateFromProps()<br><font color="red">render</font> // 渲染组件<br><font color="red">componentDidMount</font> // 类似于vue的mounted 数据的请求+dom的操作</p><h3 id="更新时-—-运行时阶段"><a href="#更新时-—-运行时阶段" class="headerlink" title="更新时 — 运行时阶段"></a>更新时 — 运行时阶段</h3><p>static getDerivedStateFromProps()<br>shouldComponentUpdate<br><font color="red">render</font> // 重新渲染数据<br>getSnapshotBeforeUpdate()<br><font color="red">componentDidUpdate</font> // 类似于vue的updated dom的操作 – (有条件的数据请求)</p><h3 id="卸载时-—-销毁阶段"><a href="#卸载时-—-销毁阶段" class="headerlink" title="卸载时 — 销毁阶段"></a>卸载时 — 销毁阶段</h3><p><font color="red">componentWillUnmount()</font> // 类似于vue的beforeDestroy,销毁钱执行操作</p><h3 id="捕获异常-1"><a href="#捕获异常-1" class="headerlink" title="捕获异常"></a>捕获异常</h3><p>static getDerivedStateFromError()<br>componentDidCatch</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-1</title>
      <link href="/2020/08/06/react-1/"/>
      <url>/2020/08/06/react-1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-react"><a href="#1-react" class="headerlink" title="1.react"></a>1.react</h1><p>拷贝webpack配置好的public+webpack.config.js+package.json<br>删除vuwe相关的配置文件<br>创建src/index.js</p><pre class=" language-js"><code class="language-js">cnpm i react react<span class="token operator">-</span>dom <span class="token operator">-</span>S</code></pre><h2 id="1-1-创建一个react组件"><a href="#1-1-创建一个react组件" class="headerlink" title="1.1 创建一个react组件"></a>1.1 创建一个react组件</h2><p>react组件的后缀名可以是js或者jsx<br>react组件分类: 类分类(class组件)+函数式组件<br>类组件-es6 中类 class<br>函数式组件 - js中的函数(一半的函数,箭头函数)<br>写react其中写的就是js +react的语法{}<br>组件的首字母必须大写(class类的首字母要大写)<br>组件的调用就像是html标签一样,如果组件的首字母小写,就会当作html标签使用,但是html默认标签没有该标签,就不会显示<br>react分为两类:react+react-dom<br>任何形式的react组件,都必须导入react模块</p><h2 id="1-2-创建一个类组件"><a href="#1-2-创建一个类组件" class="headerlink" title="1.2 创建一个类组件"></a>1.2 创建一个类组件</h2><p>App.jsX</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// js 中含有的  构造器   -- react</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 继承父类的函数 render () --- 渲染  --- 渲染是一个组件的结构</span>    <span class="token comment" spellcheck="true">// 返回的是一段  jsx 代码 - javascript xml - 类xml语言</span>    <span class="token comment" spellcheck="true">// 使用()包裹 jsx 代码 </span>    <span class="token comment" spellcheck="true">// 虚拟DOM</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        hello react      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre><p>入口文件 使用index.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token comment" spellcheck="true">// 内层 React.createElement  ---  组件都需要引入react</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="1-3-函数式组件"><a href="#1-3-函数式组件" class="headerlink" title="1.3 函数式组件"></a>1.3 函数式组件</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token comment" spellcheck="true">// function App () {</span><span class="token comment" spellcheck="true">//   return (</span><span class="token comment" spellcheck="true">//     &lt;div></span><span class="token comment" spellcheck="true">//       hello React - function</span><span class="token comment" spellcheck="true">//     &lt;/div></span><span class="token comment" spellcheck="true">//   )</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// const App = function () {</span><span class="token comment" spellcheck="true">//   return (</span><span class="token comment" spellcheck="true">//     &lt;div></span><span class="token comment" spellcheck="true">//       hello React - function111</span><span class="token comment" spellcheck="true">//     &lt;/div></span><span class="token comment" spellcheck="true">//   )</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// const App = () => {</span><span class="token comment" spellcheck="true">//   return (</span><span class="token comment" spellcheck="true">//     &lt;div></span><span class="token comment" spellcheck="true">//       hello React - function222</span><span class="token comment" spellcheck="true">//     &lt;/div></span><span class="token comment" spellcheck="true">//   )</span><span class="token comment" spellcheck="true">// }</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    hello React <span class="token operator">-</span> <span class="token keyword">function</span> <span class="token number">3333</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre><p>任何时候都可以使用类组件,没有初始值时可以使用函数式组件</p><h2 id="1-4-状态"><a href="#1-4-状态" class="headerlink" title="1.4 状态"></a>1.4 状态</h2><p>提到状态 - 类组件 - js的class<br>定义一个类的基本属性 — 借助于类的构造函数 — js<br>react 加一个规范,初始化数据 this.state = {}</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// js 中含有的  构造器   -- react</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token string">'hello react'</span><span class="token comment" spellcheck="true">// 初始化的数据 - 状态</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        hello react        <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>msg <span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre><h2 id="1-5-列表循环"><a href="#1-5-列表循环" class="headerlink" title="1.5 列表循环"></a>1.5 列表循环</h2><p>边遍历边循环</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 初始化的数据 - 状态</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'aaa'</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">,</span> <span class="token string">'ccc'</span><span class="token punctuation">,</span> <span class="token string">'ddd'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>react <span class="token operator">-</span> 列表循环<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>ul<span class="token operator">></span>          <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 边遍历 边渲染</span>            <span class="token comment" spellcheck="true">// 不能使用 for 循环（语法通不过） forEach（没有效果）</span>            <span class="token comment" spellcheck="true">// map 自带返回值</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>li key<span class="token operator">=</span> <span class="token punctuation">{</span> index <span class="token punctuation">}</span><span class="token operator">></span> <span class="token punctuation">{</span> item <span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>              <span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// for () 一些就报错</span>            <span class="token comment" spellcheck="true">// this.state.list.forEach((item, index) => {</span>            <span class="token comment" spellcheck="true">//   return (</span>            <span class="token comment" spellcheck="true">//   &lt;li key = { index }>{ item}&lt;/li></span>            <span class="token comment" spellcheck="true">//   )</span>            <span class="token comment" spellcheck="true">// })</span>          <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre><p>先遍历后渲染</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 初始化的数据 - 状态</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'aaa'</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">,</span> <span class="token string">'ccc'</span><span class="token punctuation">,</span> <span class="token string">'ddd'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 先遍历后渲染 -- 借助于 数组的 特性 [ &lt;h1>&lt;/h1>, &lt;h1>&lt;/h1>, &lt;App />]</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// for(var i =0; i&lt; len; i++) {}</span>    <span class="token comment" spellcheck="true">// map</span>    <span class="token comment" spellcheck="true">// for (var i in list) {}</span>    <span class="token comment" spellcheck="true">// for (var item of list) {}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>react <span class="token operator">-</span> 列表循环<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>ul<span class="token operator">></span>          <span class="token punctuation">{</span>            arr          <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre><h2 id="1-6条件渲染"><a href="#1-6条件渲染" class="headerlink" title="1.6条件渲染"></a>1.6条件渲染</h2><p>if-else<br>三元运算符<br>jsx语法中不能使用if语句</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      flag<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// render() {</span>  <span class="token comment" spellcheck="true">//   return (</span>  <span class="token comment" spellcheck="true">//     &lt;div></span>  <span class="token comment" spellcheck="true">//       {</span>  <span class="token comment" spellcheck="true">//         this.state.flag ? &lt;h1>真&lt;/h1> : &lt;h1>假&lt;/h1></span>  <span class="token comment" spellcheck="true">//       }</span>  <span class="token comment" spellcheck="true">//     &lt;/div></span>  <span class="token comment" spellcheck="true">//   )</span>  <span class="token comment" spellcheck="true">// }</span>  <span class="token comment" spellcheck="true">// render() {</span>  <span class="token comment" spellcheck="true">//   if (this.state.flag) {</span>  <span class="token comment" spellcheck="true">//     return (</span>  <span class="token comment" spellcheck="true">//       &lt;div></span>  <span class="token comment" spellcheck="true">//         &lt;h1>react 条件判断&lt;/h1></span>  <span class="token comment" spellcheck="true">//         真真</span>  <span class="token comment" spellcheck="true">//       &lt;/div></span>  <span class="token comment" spellcheck="true">//     )</span>  <span class="token comment" spellcheck="true">//   } else {</span>  <span class="token comment" spellcheck="true">//     return (</span>  <span class="token comment" spellcheck="true">//       &lt;div></span>  <span class="token comment" spellcheck="true">//         &lt;h1>react 条件判断&lt;/h1></span>  <span class="token comment" spellcheck="true">//         假假</span>  <span class="token comment" spellcheck="true">//       &lt;/div></span>  <span class="token comment" spellcheck="true">//     )</span>  <span class="token comment" spellcheck="true">//   }</span>  <span class="token comment" spellcheck="true">// }</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>      test <span class="token operator">=</span> <span class="token string">'真真'</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      test <span class="token operator">=</span> <span class="token string">'假假'</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>react 条件判断<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token punctuation">{</span>          test        <span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre><h2 id="1-7-样式-class-style"><a href="#1-7-样式-class-style" class="headerlink" title="1.7 样式-class-style"></a>1.7 样式-class-style</h2><p>html页面<br>jsx - className=”active”<br>html - style=”padding-top:10px”</p><p>jsx -style ={{ paddingTop:"10px" }}</p>{% raw %}<pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"box"</span> style <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">"#f66"</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token operator">></span>        jsx 的style 语法      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-8-事件处理"><a href="#1-8-事件处理" class="headerlink" title="1.8 事件处理"></a>1.8 事件处理</h2><p>html -<br>jsx - onClick = { this.clickFn }</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>testfn5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>testfn5<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>testfn7 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>testfn7<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'bbbb'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// constructor 只执行一次 ---- created</span>  <span class="token punctuation">}</span>  testfn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点击事件'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  testfn1 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点击事件'</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// MouseEvent</span>  <span class="token punctuation">}</span>  testfn2 <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点击事件'</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Class</span>  <span class="token punctuation">}</span>  testfn3 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span>  <span class="token punctuation">}</span>  testfn4 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// App</span>  <span class="token punctuation">}</span>  testfn5 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// App</span>  <span class="token punctuation">}</span>  testfn6 <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// ---- 2的那个event 极易被当作参数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'参数'</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// aaaa</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'事件对象'</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// MouseEvent</span>  <span class="token punctuation">}</span>  testfn7 <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'参数'</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// aaaa</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>testfn <span class="token punctuation">}</span><span class="token operator">></span>点击事件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>testfn1 <span class="token punctuation">}</span><span class="token operator">></span>点击事件<span class="token operator">-</span>事件对象<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>testfn2 <span class="token punctuation">}</span><span class="token operator">></span>点击事件<span class="token operator">-</span>事件对象<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>testfn3 <span class="token punctuation">}</span><span class="token operator">></span>点击事件<span class="token operator">-</span><span class="token keyword">this</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>testfn4<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">></span>点击事件<span class="token operator">-</span><span class="token keyword">this</span><span class="token operator">-</span>只是改变<span class="token keyword">this</span>指向<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>testfn5 <span class="token punctuation">}</span><span class="token operator">></span>点击事件<span class="token operator">-</span><span class="token keyword">this</span><span class="token operator">-</span>改变<span class="token keyword">this</span>指向<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>testfn6<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">></span>点击事件<span class="token operator">-</span>传递参数<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>testfn7 <span class="token punctuation">}</span><span class="token operator">></span>点击事件<span class="token operator">-</span>传递参数<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>点击事件<span class="token operator">-</span>箭头函数<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-9-修改状态"><a href="#1-9-修改状态" class="headerlink" title="1.9 修改状态"></a>1.9 修改状态</h2><p>vue - this.msg = ‘’<br>react - this.setState({msg:’’})<br>react- this.setState({msg:’’},()=&gt;{})</p><pre class=" language-js"><code class="language-js">react <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prevState<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>1.执行setState()之后干了什么？<br>一个大的任务需要 10个小目标必须完成，每完成一个，将其压入队列，直到多有的都已结束，回报任务完成</p><p>setState()方法通过一个队列机制实现state更新，当执行setState()的时候，会将需要更新的state合并之后放入状态队列，而不会立即更新this.state(可以和浏览器的事件队列类比)。如果我们不使用setState而是使用this.state.key来修改，将不会触发组件的re-render。如果将this.state赋值给一个新的对象引用，那么其他不在对象上的state将不会被放入状态队列中，当下次调用setState()并对状态队列进行合并时，直接造成了state丢失。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2020/08/06/webpack/"/>
      <url>/2020/08/06/webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="1-webpack"><a href="#1-webpack" class="headerlink" title="1.webpack"></a>1.webpack</h1><p>webpack是基于node.js的一个自动任务的运行器,打包的工具<br>webpack是为react而量身打造的一款模块化开发工具</p><h1 id="2-webpack的安装与版本"><a href="#2-webpack的安装与版本" class="headerlink" title="2.webpack的安装与版本"></a>2.webpack的安装与版本</h1><p>安装</p><pre class=" language-js"><code class="language-js">cnpm i webpack <span class="token operator">-</span>g cnpm i webpack webpack<span class="token operator">-</span>cil <span class="token operator">-</span>S</code></pre><p>版本查看</p><pre class=" language-js"><code class="language-js">webpack <span class="token operator">-</span>v</code></pre><p>4以上的版本免配但是可配<br>4版本以下的必须配置</p><h2 id="2-1-0配置"><a href="#2-1-0配置" class="headerlink" title="2.1 0配置"></a>2.1 0配置</h2><p>免配置<br>在一个目录src文件夹下有一个index.js文件,在index.js里编写业务逻辑,命令行执行</p><pre class=" language-js"><code class="language-js">webpack</code></pre><p>自动打包出dist/main.js</p><p>设置运行开发模式</p><pre class=" language-js"><code class="language-js">webpack <span class="token operator">--</span>mode development</code></pre><h2 id="2-2-改变默认入口"><a href="#2-2-改变默认入口" class="headerlink" title="2.2 改变默认入口"></a>2.2 改变默认入口</h2><p>将入口文件改为src下的test.js</p><pre class=" language-js"><code class="language-js">webpack src<span class="token operator">/</span>test<span class="token punctuation">.</span>js <span class="token operator">--</span>mode production</code></pre><h2 id="2-3-改变默认的出口"><a href="#2-3-改变默认的出口" class="headerlink" title="2.3 改变默认的出口"></a>2.3 改变默认的出口</h2><p>将出口文件改为dist下的bundle.js</p><pre class=" language-js"><code class="language-js">webpack src<span class="token operator">/</span>test<span class="token punctuation">.</span>js <span class="token operator">--</span>output dist<span class="token operator">/</span>bundle<span class="token punctuation">.</span>js <span class="token operator">--</span>mode production</code></pre><h2 id="2-4-多入口"><a href="#2-4-多入口" class="headerlink" title="2.4 多入口"></a>2.4 多入口</h2><p>将src下的one.js和two.js都变为入口文件</p><pre class=" language-js"><code class="language-js">webpack src<span class="token operator">/</span>one<span class="token punctuation">.</span>js src<span class="token operator">/</span>two<span class="token punctuation">.</span>js <span class="token operator">--</span>mode development</code></pre><h1 id="3-webpack配置"><a href="#3-webpack配置" class="headerlink" title="3.webpack配置"></a>3.webpack配置</h1><p>入口 – entry<br>出口 – output<br>插件 — plugins (压缩,页面模板,去除引号等)<br>转换器 — loader (scss/less.stylus/scc/js)<br>服务器 – devServer (host/port/代理/默认打开浏览器)<br>别名,缺省或追名 – resolve</p><p>根目录下创建文件 webpack.config.js</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="3-1-入口和出口配置"><a href="#3-1-入口和出口配置" class="headerlink" title="3.1 入口和出口配置"></a>3.1 入口和出口配置</h2><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token comment" spellcheck="true">// 入口文件,多入口可以写多个</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 必须写成对象形式</span>    path<span class="token punctuation">:</span> __dirname<span class="token operator">+</span><span class="token string">'/dist'</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].[hash:8].js'</span><span class="token comment" spellcheck="true">//防止缓存,添加八位随机数</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h2 id="3-2-页面模板"><a href="#3-2-页面模板" class="headerlink" title="3.2 页面模板"></a>3.2 页面模板</h2><p>打包时自动吧public下的index.html文件打包到dist目录,并且自动引入导出的js文件<br>插件<br>每次打包前先清空</p><pre class=" language-js"><code class="language-js">cnpm i clean<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">-</span>S</code></pre><p>打包页面模板</p><pre class=" language-js"><code class="language-js">cnpm i html<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin<span class="token operator">-</span>S</code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 导入打包页面模板插件</span><span class="token keyword">var</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 导入清空插件</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> __dirname<span class="token operator">+</span><span class="token string">'/dist'</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].[hash:8].js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包时替换上一次打包的文件</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./public/index.html'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 自动把public.index,html文件复制到dist/index.html,并且自动引入了js文件,默认在body的结尾引入</span>      minify<span class="token punctuation">:</span>         removeAttributeQuotes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 移除属性的符号</span>        removeEmptyAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 移除空的属性</span>        removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 移除注释</span>        collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 折叠空白部分</span>        <span class="token comment" spellcheck="true">// removeEmptyElement:true // 移除空元素 --一般不设定</span>        removeScriptTypeAttributesL<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 引入导入的script 的type的类型</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h1 id="4-转换器"><a href="#4-转换器" class="headerlink" title="4.转换器"></a>4.转换器</h1><p>loader让webpack能够去处理那些非JavaScript文件(webpack自身只理解JavaScript).loader可以将所有类型的文件转换为webpack能够处理的有效模块,然后就可以利用webpack的打包能力对它们进行处理</p><h2 id="4-1-处理css类型文件"><a href="#4-1-处理css类型文件" class="headerlink" title="4.1 处理css类型文件"></a>4.1 处理css类型文件</h2><pre class=" language-js"><code class="language-js">cnpm i css<span class="token operator">-</span>loader style<span class="token operator">-</span>loader <span class="token operator">-</span>S</code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader/lib/plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token operator">...</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 处理非js类型的文件转换为在 项目 可以运行的代码</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 正则表达式表示以css结尾的文件</span>        <span class="token comment" spellcheck="true">// loader: 'style-loader!css-loader'</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token comment" spellcheck="true">// { loader: 'style-loader' },</span>          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'style-loader'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              modules<span class="token punctuation">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h2 id="4-2-处理scss文件"><a href="#4-2-处理scss文件" class="headerlink" title="4.2 处理scss文件"></a>4.2 处理scss文件</h2><pre class=" language-js"><code class="language-js">cnpm i sass node<span class="token operator">-</span>sass sass<span class="token operator">-</span>loader <span class="token operator">-</span>S</code></pre><pre class=" language-js"><code class="language-js">  <span class="token punctuation">{</span>    test<span class="token punctuation">:</span> <span class="token regex">/\.scss$/</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// loader: 'style-loader!css-loader!sass-loader'</span>    use<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'style-loader'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          modules<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'sass-loader'</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h2 id="4-3-处理less-stylus类型文件"><a href="#4-3-处理less-stylus类型文件" class="headerlink" title="4.3 处理less/stylus类型文件"></a>4.3 处理less/stylus类型文件</h2><pre class=" language-js"><code class="language-js">cnpm i less less<span class="token operator">-</span>loader <span class="token operator">-</span>Scnpm i stylus stylus<span class="token operator">-</span>loader <span class="token operator">-</span>S</code></pre><pre class=" language-js"><code class="language-js">  <span class="token punctuation">{</span>    test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// loader: 'style-loader!css-loader!sass-loader'</span>    use<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'style-loader'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          modules<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'less-loader'</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    test<span class="token punctuation">:</span> <span class="token regex">/\.stylus$/</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// loader: 'style-loader!css-loader!sass-loader'</span>    use<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'style-loader'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          modules<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'stylus-loader'</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h2 id="4-4-处理js类型的高级语法"><a href="#4-4-处理js类型的高级语法" class="headerlink" title="4.4 处理js类型的高级语法"></a>4.4 处理js类型的高级语法</h2><pre class=" language-js"><code class="language-js">cnpm i @babel<span class="token operator">/</span>core babel<span class="token operator">-</span>loader <span class="token operator">-</span>Scnpm i @babel<span class="token operator">/</span>preset<span class="token operator">-</span>env @babel<span class="token operator">/</span>preset<span class="token operator">-</span>react <span class="token operator">-</span>S</code></pre><pre class=" language-js"><code class="language-js">  <span class="token punctuation">{</span>    test<span class="token punctuation">:</span> <span class="token regex">/\.(js|jsx)$/</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// loader: 'babel-loader' // 根目录下创建  .babelrc 文件 { presets: []} </span>    use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>      loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 前者为 js高级语法服务，后者为react服务</span>        presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span> <span class="token string">'@babel/preset-react'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span></code></pre><h2 id="4-5-css文件包含背景图片"><a href="#4-5-css文件包含背景图片" class="headerlink" title="4.5 css文件包含背景图片"></a>4.5 css文件包含背景图片</h2><pre class=" language-js"><code class="language-js">cnpm i file<span class="token operator">-</span>loader url<span class="token operator">-</span>loader <span class="token operator">-</span>S</code></pre><pre class=" language-js"><code class="language-js">  <span class="token punctuation">{</span>    test<span class="token punctuation">:</span> <span class="token regex">/\.(jpg|jpeg|png|gif|webp)$/</span><span class="token punctuation">,</span>    use<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          limit<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          mimetype<span class="token punctuation">:</span> <span class="token string">'image/png'</span><span class="token punctuation">,</span>          outputPath<span class="token punctuation">:</span> <span class="token string">'img'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span></code></pre><h2 id="4-6-媒体类型的文件或者字体文件"><a href="#4-6-媒体类型的文件或者字体文件" class="headerlink" title="4.6. 媒体类型的文件或者字体文件"></a>4.6. 媒体类型的文件或者字体文件</h2><p>使用的也是 url-loader</p><h1 id="5-开发者服务器"><a href="#5-开发者服务器" class="headerlink" title="5.开发者服务器"></a>5.开发者服务器</h1><pre class=" language-js"><code class="language-js">cnpm i webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server <span class="token operator">-</span>gcnpm i webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server <span class="token operator">-</span>Swebpack<span class="token operator">-</span>dev<span class="token operator">-</span>server</code></pre><p>配置运行命令<br>打开根目录下的packgae.json</p><pre class=" language-js"><code class="language-js">  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server"</span><span class="token punctuation">,</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"webpack"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>开发命令</p><pre class=" language-js"><code class="language-js">cnpm run dev</code></pre><p>打包命令</p><pre class=" language-js"><code class="language-js">cnpm run build</code></pre><h2 id="5-1-配置开发者服务器"><a href="#5-1-配置开发者服务器" class="headerlink" title="5.1 配置开发者服务器"></a>5.1 配置开发者服务器</h2><pre class=" language-js"><code class="language-js"> devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 局域网内访问别人的项目</span>    <span class="token comment" spellcheck="true">// open: true // 自动打开默认浏览器运行项目</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 配置代理的服务器 --- 解决跨域问题</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p>5.2运行开到源码和@符号</p><pre class=" language-js"><code class="language-js">devtool<span class="token punctuation">:</span> <span class="token string">'source-map'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 方便查看源代码 --  代码调试</span>  <span class="token comment" spellcheck="true">// @</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">,</span> <span class="token string">'.stylus'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 引入时可以省略后缀名</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// @ 代表src目录</span>      <span class="token string">'@'</span><span class="token punctuation">:</span> __dirname <span class="token operator">+</span> <span class="token string">'/src'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>#6 webpack+vue</p><h2 id="6-2-配置vue文件解析器"><a href="#6-2-配置vue文件解析器" class="headerlink" title="6.2 配置vue文件解析器"></a>6.2 配置vue文件解析器</h2><pre class=" language-js"><code class="language-js">cnpm i vue<span class="token operator">-</span>loader vue<span class="token operator">-</span>template<span class="token operator">-</span>compiler <span class="token operator">-</span>Scnpm i vue<span class="token operator">-</span>style<span class="token operator">-</span>loader <span class="token operator">-</span>S</code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader/lib/plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> __dirname <span class="token operator">+</span> <span class="token string">'/dist'</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].[hash:8].js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./public/index.html'</span><span class="token punctuation">,</span>      minify<span class="token punctuation">:</span> <span class="token punctuation">{</span>        removeAttributeQuotes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 处理非js类型的文件转换为在 项目 可以运行的代码</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 正则表达式表示以css结尾的文件</span>        <span class="token comment" spellcheck="true">// loader: 'style-loader!css-loader'</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token comment" spellcheck="true">// { loader: 'style-loader' },</span>          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'style-loader'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              modules<span class="token punctuation">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// use: ['vue-loader']</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'vue-loader'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.scss$/</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// loader: 'style-loader!css-loader!sass-loader'</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'style-loader'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              modules<span class="token punctuation">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'sass-loader'</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// loader: 'style-loader!css-loader!sass-loader'</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'style-loader'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              modules<span class="token punctuation">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'less-loader'</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.stylus$/</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// loader: 'style-loader!css-loader!sass-loader'</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'style-loader'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              modules<span class="token punctuation">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'stylus-loader'</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(js|jsx)$/</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// loader: 'babel-loader' // 根目录下创建  .babelrc 文件 { presets: []} </span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 前者为 js高级语法服务，后者为react服务</span>            presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span> <span class="token string">'@babel/preset-react'</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(jpg|jpeg|png|gif|webp)$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              limit<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>              mimetype<span class="token punctuation">:</span> <span class="token string">'image/png'</span><span class="token punctuation">,</span>              outputPath<span class="token punctuation">:</span> <span class="token string">'img'</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 局域网内访问别人的项目</span>    <span class="token comment" spellcheck="true">// open: true // 自动打开默认浏览器运行项目</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 配置代理的服务器 --- 解决跨域问题</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>  devtool<span class="token punctuation">:</span> <span class="token string">'source-map'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 方便查看源代码 --  代码调试</span>  <span class="token comment" spellcheck="true">// @</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">,</span> <span class="token string">'.stylus'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 引入时可以省略后缀名</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// @ 代表src目录</span>      <span class="token string">'@'</span><span class="token punctuation">:</span> __dirname <span class="token operator">+</span> <span class="token string">'/src'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript实现记事本应用&quot;干嘛&quot;</title>
      <link href="/2020/01/11/ganma/"/>
      <url>/2020/01/11/ganma/</url>
      
        <content type="html"><![CDATA[<h2 id="应用界面"><a href="#应用界面" class="headerlink" title="应用界面"></a>应用界面</h2><img src="http://chuantu.xyz/t6/711/1578644737x3661913030.jpg" style="zoom:33%;"><p>输入框内输入内容,点击添加生成内容</p><p>点击完成清除内容</p><p>数据存储在本地LocalStorage</p><h2 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h2><p><a href="https://pan.baidu.com/s/1g-oOxnlQFNCwSfaJqFn7Og" target="_blank" rel="noopener">https://pan.baidu.com/s/1g-oOxnlQFNCwSfaJqFn7Og</a> 提取码:2t8l</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>html</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;    &lt;title&gt;干嘛&lt;/title&gt;    &lt;link rel="stylesheet" href="./css/ganma.css"&gt;&lt;/head&gt;`&lt;body&gt;`    &lt;header&gt;        今天干嘛    &lt;/header&gt;    &lt;main&gt;        &lt;div class="shuru"&gt;            &lt;input type="text" id="shuru"&gt;            &lt;button id="shurubtn"&gt;添加&lt;/button&gt;        &lt;/div&gt;        &lt;ul&gt;       `&lt;/ul&gt;`    `&lt;/main&gt;`    &lt;footer&gt;    `&lt;/footer&gt;`    &lt;script src="./js/jquery.min.js"&gt;&lt;/script&gt;    &lt;script src="./js/ganma.js"&gt;&lt;/script&gt;`&lt;/body&gt;``&lt;/html&gt;`</code></pre><p>css</p><pre><code>*{    margin: 0;    padding: 0;}li{    list-style: none;}body{    font-family: serif;}header{    text-align: center;    width: 100%;    padding-top: 80px;    background: url(../img/background.png)no-repeat;    font-size: 30px;}main{    text-align: center;    background: url(../img/mainbg.png) repeat-y;}.shuru{    padding-bottom: 50px;}#shuru{    padding: 5px;    border: none;    border-bottom: 2px solid #000;    background: rgb(242, 242, 242);}ul input{    border: none;    background: rgb(242, 242, 242);    margin-right: 10px;}footer{    background:url(../img/background.png);    background-position-y: bottom;    height: 100px;}button {  background: #eae0c2;  background-image: -webkit-linear-gradient(top, #eae0c2, #ccc2a6);  background-image: -moz-linear-gradient(top, #eae0c2, #ccc2a6);  background-image: -ms-linear-gradient(top, #eae0c2, #ccc2a6);  background-image: -o-linear-gradient(top, #eae0c2, #ccc2a6);  background-image: linear-gradient(to bottom, #eae0c2, #ccc2a6);  -webkit-border-radius: 15;  -moz-border-radius: 15;  border-radius: 15px;  text-shadow: 0px 1px 0px #ffffff;  -webkit-box-shadow: 0px 1px 0px 0px #1c1b18;  -moz-box-shadow: 0px 1px 0px 0px #1c1b18;  box-shadow: 0px 1px 0px 0px #1c1b18;  font-family: Arial;  color: #505739;  font-size: 16px;  padding: 6px 15px 6px 15px;  border: solid #333029 2px;  text-decoration: none;}button:hover {  color: #505739;  background: #ccc2a6;  text-decoration: none;}</code></pre><p>js</p><pre><code>let arr = [];$('#shurubtn').on('click', function () {    arr.push($('#shuru').val())    localStorage.setItem('key', arr);    setHtml();});setHtml();function setHtml() {    let i = localStorage.getItem('key');    arr = i.split(',');    let str = ``;    arr.forEach((item, key) =&gt; {        str += `&lt;li&gt;            &lt;input type="text" name="" id="" value="${item}" /&gt;            &lt;button index="${key}"&gt;完成&lt;/button&gt;        &lt;/li&gt;`    });    console.log(str)    $('main ul').html(str);    Delete()}function Delete() {    $('ul button').on('click', function () {        window.location.reload();        let index = this.getAttribute('index');        arr.splice(index, 1);        if (arr != '') {            localStorage.setItem('key', arr);            console.log(123)        } else {            localStorage.removeItem("key")        }        setHtml()    })};</code></pre><p>jQuery自己下一个就行</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 无聊瞎搞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客主题配置</title>
      <link href="/2020/01/11/zhutipeizhi/"/>
      <url>/2020/01/11/zhutipeizhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 和 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a>、<a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能。</li></ul><h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><p>感谢下面列出的贡献者，没有他们，hexo-theme-matery 不会这么完美。</p><ul><li><a href="https://github.com/HarborZeng" target="_blank" rel="noopener">@HarborZeng</a></li><li><a href="https://github.com/shw2018" target="_blank" rel="noopener">@shw2018</a></li><li><a href="https://github.com/L1cardo" target="_blank" rel="noopener">@L1cardo</a></li><li><a href="https://github.com/Five-great" target="_blank" rel="noopener">@Five-great</a></li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>当你看到这里的时候，应该已经有一个自己的 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown</a> 来写博客和文章。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master" target="_blank" rel="noopener">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span></code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中查找   </p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book</code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作<br>1.在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)<br>2.在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 <code>-</code>.<br>4.注意缩进格式  </p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Musics        <span class="token key atrule">url</span><span class="token punctuation">:</span> /musics        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>  custom_css<span class="token punctuation">:</span></code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post</code></pre><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 阅读次数.</span></code></pre><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis" target="_blank" rel="noopener">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span></code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.socialLink.github)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> theme.socialLink.github %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"五月雨变奏电音"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"AnimeVibe"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music1.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover1.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Take me hand"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"DAISHI DANCE,Cecile Corbel"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"/medias/music/music2.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"/medias/music/cover2.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Shape of You"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"J.Fla"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music3.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover3.png"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><blockquote><p><strong>注</strong>：以上 JSON 中的属性：<code>name</code>、<code>artist</code>、<code>url</code>、<code>cover</code> 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p></blockquote><p>然后，在主题的 <code>_config.yml</code> 配置文件中激活配置即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 是否在首页显示音乐.</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">showTitle</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> '<span class="token comment" spellcheck="true">#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span> <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'list'</span> <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span> <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7 </span><span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 列表默认折叠</span>  <span class="token key atrule">listMaxHeight</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 列表最大高度</span></code></pre><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></p><p><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></p><p><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-7.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本记录"><a href="#版本记录" class="headerlink" title="版本记录"></a>版本记录</h2><ul><li>v1.2.2<ul><li>新增了自定义文章 <code>keywords</code> 的功能；</li><li>新增静态彩带点击切换的功能和配置；</li><li>将文章字数统计、彩带和站点运行时间等功能默认设置为 <code>false</code>；</li><li>修改了文章的 <code>description</code> 的 meta 属性优先读取文章的 <code>summary</code> 属性；</li><li>修改了文章标题的 HTML 标签，从 <code>div</code> 改成了 <code>h1</code> 标题；</li><li>修改了页脚年份显示不正确的问题；</li><li>去掉了站点运行时间中多余的 <code>setTimeout</code> 代码；</li></ul></li><li>v1.2.1<ul><li>新增了 TOC 的展开目录层级设置和滚动条功能，防止目录较多的时候目录溢出；</li><li>修改了首页的展示方式为以前的模式；</li><li>修复首页按钮没有边框的问题；</li><li>修复了音乐及吸底模式、视频、推荐文章等不激活时仍然生成首页卡片的问题；</li><li>修复 wordCount 插件未安装的问题，修改了部分配置；</li><li>修复音乐的 JSON 配置中有单引号的情况页面不显示的音乐的问题</li><li>修复标签云在Hexo4.0下链接失效的问题；</li></ul></li><li>v1.2.0<ul><li>新增了 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a>、<a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 的在线聊天功能；</li><li>新增了两级菜单的功能；</li><li>新增了打字效果的副标题；</li><li>新增了网页内容预加载的功能；</li><li>新增了首页 banner 是否每日切换的配置功能；</li><li>新增了显示 ICP 备案信息的功能，默认未开启；</li><li>新增了百度分析的配置；</li><li>新增了代码块的语言显示、一键复制、显示行号等功能；</li><li>新增了首页轮播图和推荐文章可自定义配置的功能；</li><li>新增了文章页面显示更新日期；</li><li>新增了转载规则的图标；</li><li>修改了分享的布局和显示方式；</li><li>升级更新了部分依赖库的版本；</li><li>其他细节修改和优化；</li></ul></li><li>v1.1.0<ul><li>新增了 <code>emoji</code> 的支持；</li><li>新增了站点运行时间统计及配置；</li><li>新增了留言板的功能,默认未开启；</li><li>新增了 <code>Twitter</code>、<code>Facebook</code>、知乎的社交链接；</li><li>更新了 <code>Valine</code> 的版本为最新版；</li><li>其他小细节的修改；</li></ul></li><li>v1.0.4<ul><li>新增了能为每篇文章都自定义转载规则的功能；</li><li>修复上一页、下一页的自定义 <code>summary</code> 不显示的问题；</li><li>修复了友情链接显示错位的问题，改为了瀑布流的布局方式；</li><li>其他小细节 bug 的修改；</li></ul></li><li>v1.0.3<ul><li>新增了<code>TOC</code>展开、收缩的按钮和相关配置，默认显示此按钮；</li></ul></li><li>v1.0.2<ul><li>升级了 <a href="https://materializecss.com/" target="_blank" rel="noopener">Materialize</a> 框架版本为<code>1.0.0</code>，重构和修改了升级过程中的部分文件或问题；</li><li>新增了首页封面的全屏轮播特效，可以将更重要的文章设置到首页轮播中；</li><li>修复首页第一个按钮是中文的问题</li><li>修复了 iPhone 上点击搜索输入获取焦点的问题；</li><li>修复了 iPhone 上输入框获取焦点后页面放大的问题；</li><li>修复一些文章或 UI 显示问题；</li></ul></li><li>v1.0.1<ul><li>调整 <code>css</code>、<code>js</code> 的文件请求路径在主题的<code>_config.yml</code>中配置，便于你更快捷的配置自己的 CDN；</li><li>新增代码是否折行为可配置，默认为折行；</li><li>默认激活 <code>TOC</code> 功能，并新增为某篇文章关闭 <code>TOC</code> 的 <code>Front-matter</code> 配置选项；</li><li>修复文章滚动时，高亮的目录选项不准确的问题；</li><li><code>IOS</code>下移除搜索框自动获得焦点属性，防止自动获得焦点后导致视图上移；</li></ul></li><li>v1.0.0<ul><li>新增了所有基础功能；</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高大上博客制作教程</title>
      <link href="/2020/01/11/blog-jiaocheng/"/>
      <url>/2020/01/11/blog-jiaocheng/</url>
      
        <content type="html"><![CDATA[<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>首先下载稳定版<a href="https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi" target="_blank" rel="noopener">Node.js</a>，我这里给的是64位的。</p><p>安装选项全部默认，一路点击<code>Next</code>。</p><p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p><h2 id="添加国内镜像源"><a href="#添加国内镜像源" class="headerlink" title="添加国内镜像源"></a>添加国内镜像源</h2><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。</p><p><code>npm config set registry https://registry.npm.taobao.org</code></p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————Git<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">[下载地址]</a>。</p><p>安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p><p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p><h2 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h2><p>接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。</p><p>打开<a href="https://github.com/，新建一个项目，输入自己的项目名字，后面一定要加`.github.io`后缀。**名称一定要和你的github名字完全一样，比如你github名字叫`abc`，那么仓库名字一定要是`abc.github.io`。" target="_blank" rel="noopener">https://github.com/，新建一个项目，输入自己的项目名字，后面一定要加`.github.io`后缀。**名称一定要和你的github名字完全一样，比如你github名字叫`abc`，那么仓库名字一定要是`abc.github.io`。</a>**<br>然后项目就建成了，点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，再回到<code>GitHub Pages</code>，在地址栏输入<code>你的用户名.github.io</code>就能看到你的主页了。<br>具体可以看我的<a href="https://www.bilibili.com/video/av70212514" target="_blank" rel="noopener">B站视频</a></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在<code>D:\study\program\blog</code>目录下。</p><p>在该目录下右键点击<code>Git Bash Here</code>，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。</p><p>定位到该目录下，输入<code>npm i hexo-cli -g</code>安装Hexo。会有几个报错，无视它就行。</p><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件。</p><p>这样本地的网站配置也弄好啦，输入<code>hexo g &amp;&amp; hexo s</code>打开本地服务器，然后浏览器打开<a href="http://localhost:4000/，就可以看到我们的博客啦" target="_blank" rel="noopener">http://localhost:4000/，就可以看到我们的博客啦</a></p><p>按<code>ctrl+c</code>关闭本地服务器。</p><h2 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a>连接Github与本地</h2><p>首先右键打开git bash，然后输入下面命令：</p><p><code>git config --global user.name "你的用户名"</code></p><p><code>git config global user.email "你注册时用的邮箱"</code></p><p>用户名和邮箱根据你注册github的信息自行修改。</p><p>然后生成密钥SSH key：</p><p><code>ssh-keygen -t rsa -C "你注册时用的邮箱"</code></p><p><strong>问enter file in which….时输入 ./ssh (不要忘了最前面的点)</strong></p><p>打开<a href="https://github.com/" target="_blank" rel="noopener">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便。</p><p>打开文件夹下的ssh.pub文件，复制到key里即可</p><p>输入<code>ssh -T git@github.com -i ./ssh</code>，如果出现你的用户名，那就成功了。</p><p>打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p><p>修改最后一行的配置：</p><p><code>deploy:  type: git  repository: https://github.com/gaowanliang/gaowanliang.github.io  branch: master</code></p><p>repository修改为你自己的github项目地址。</p><h2 id="写文章、发布文章"><a href="#写文章、发布文章" class="headerlink" title="写文章、发布文章"></a>写文章、发布文章</h2><p>首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。</p><p>然后输入<code>hexo new post "文章标题"</code>，新建一篇文章。</p><p>然后打开<code>D:\study\program\blog\source\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>现在默认的域名还是<code>xxx.github.io</code>，是不是很没有牌面？想不想也像我一样弄一个专属域名呢，首先你得购买一个域名，xx云都能买，看你个人喜好了。</p><p>以我的Cloudflare为例，如下图所示，添加这条解析记录：<br><img src="https://i.loli.net/2019/10/06/CHx8L6cAZJ92RQ3.png" alt="img"></p><p>然后打开你的github博客项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存：<br><img src="https://i.loli.net/2019/10/06/5v7clsJBFQM9g1a.png" alt="img"></p><p>这时候你的项目根目录应该会出现一个名为<code>CNAME</code>的文件了。如果没有的话，打开你本地博客<code>/source</code>目录，我的是<code>D:\study\program\blog\source</code>，新建<code>CNAME</code>文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行<code>hexo g</code>、<code>hexo d</code>上传到github。</p><h2 id="备份博客源文件"><a href="#备份博客源文件" class="headerlink" title="备份博客源文件"></a>备份博客源文件</h2><p>有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。</p><p>首先在github博客仓库下新建一个分支<code>hexo</code>，然后<code>git clone</code>到本地，把<code>.git</code>文件夹拿出来，放在博客根目录下。</p><p>然后<code>git checkout hexo</code>切换到<code>hexo</code>分支，然后<code>git add .</code>，然后<code>git commit -m "xxx"</code>，最后<code>git push origin hexo</code>提交就行了。</p><h2 id="下载我弄好的主题包"><a href="#下载我弄好的主题包" class="headerlink" title="下载我弄好的主题包"></a>下载我弄好的主题包</h2><p>大家也可以先用上文hexo安装方法安装完hexo，然后直接<a href="https://cdn.jsdelivr.net/gh/gaowanliang/gitment-store/hexo-theme-matery.zip" target="_blank" rel="noopener">下载这个文件</a>，放到theme文件夹里，这是我修改完的基本没bug的定制化的博客，且用了<a href="http://www.gwl6.me/2019/09/30/jia-su-github-pages-wang-zhan/" target="_blank" rel="noopener">这篇博客</a>里说的加速方式，就不用你自己搞了，就可以直接拿来用啦。</p><h2 id="其他定制选项"><a href="#其他定制选项" class="headerlink" title="其他定制选项"></a>其他定制选项</h2><p>可以看主题包作者写的<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">这个</a></p><h2 id="本文作者"><a href="#本文作者" class="headerlink" title="本文作者:"></a>本文作者:</h2><p>Gaowan Liang</p><p>原链接 : <a href="https://gwliang.com/2019/10/05/blog-jiao-cheng/" target="_blank" rel="noopener">https://gwliang.com/2019/10/05/blog-jiao-cheng/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
